<?php
/* 
 * grupal - Google Apps integrations for Drupal
 * Copyright Â© 2009 Sam Johnston <samj@samj.net> http://samj.net/
 *                  Australian Online Solutions Pty Ltd http://www.aos.net.au/
 * 
 * $Id$
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
* Display help and module information
*/
module_load_include('inc', 'grupal', 'appsapis');

/**
* Valid permissions for this module
* @return array An array of valid permissions for the grupal module
*/
function grupal_perm() {
  return array('use google apps',
               'administer google apps',
               'administer grupal'); // TODO implement this
} // function grupal_perm()

/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned by arg()
* @return help text for the path
*/
function grupal_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#grupal":
      $output = '<p>'.  t("Google Apps integrations for Drupal") .'</p>';
      break;
    case "admin/settings/grupal":
      $output = t(<<<END
<p><a href="http://code.google.com/p/grupal/">Grupal</a> provides seamless
integration between <a href="http://www.drupal.org/">Drupal</a> and
<a href="http://www.google.com/a/">Google Apps</a>. Supports creating Google
Apps users, suspending users when blocked in Drupal, synchronising passwords
when updated in Drupal and suspending or deleting users when deleted in Drupal.
</p>
END
);
      break;
  }
  return $output;
} // function grupal_help

/**
* Menu items for this module
* @return array An array of menu items
*/
function grupal_menu() {

  $items['grupal/signin'] = array(
    'title' => t('Google Apps SAML 2 IdP Sign In'),
    'page callback' => 'grupal_single_sign_in',
    'access arguments' => array('access content'),
    'file' => 'grupal.sso.inc',
    'type' => MENU_CALLBACK,
  );
  $items['grupal/signout'] = array(
    'title' => t('Google Apps SAML 2 IdP Sign Out'),
    'page callback' => 'grupal_single_sign_out',
    'access arguments' => array('access content'),
    'file' => 'grupal.sso.inc',
    'type' => MENU_CALLBACK,
  );
  $items['grupal/password'] = array(
    'title' => t('Google Apps SAML 2 IdP Password Change'),
    'page callback' => 'grupal_password',
    'access arguments' => array('use google apps'),
    'file' => 'grupal.sso.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/grupal'] = array(
    'title' => t('Grupal settings'),
	'description' => 'Configuration of Google Apps integration points',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('grupal_admin_settings'),
    'access arguments' => array('administer grupal'),
	'block callback' => 'system_admin_theme_settings',
	'file' => 'grupal.admin.inc',
   );

  return $items;
} // function grupal_menu

/**
* Handle Drupal 'user' hook events
* http://api.drupal.org/api/function/hook_user
* @param op What kind of action is being performed.
* @param edit The array of form values submitted by the user. 
* @param account The user object on which the operation is being performed.
* @param category The active category of user information being edited.
* @return depends on operation, usually none.
*/
function grupal_user($op, &$edit, &$account, $category = NULL) {
  if (!variable_get('grupal_enabled', 0)) { return; } // Bail if disabled

  $grupal_domain = variable_get('grupal_domain', '');
  // 0 = Ignore, 1 = Suspend, 2 = Enable*
  $gsc = variable_get('grupal_status_created', 2);
  // 0 = Ignore, 1 = Suspend*, 2 = Enable
  $gsd = variable_get('grupal_status_deleted', 1);

  //drupal_set_message("For $account->uid, a $op operation was invoked.");
  if (($gsc != 0) || ($gsd != 0)) {
    if (in_array($op, array('insert', 'update', 'delete'), $op) &&
      ($grupal_domain != '')) {
      try {
        $client = getClientLoginHttpClient(
	      variable_get('grupal_admin_email', ''),
	      variable_get('grupal_admin_pass', ''));
        assert($client);
        $gapps = new Zend_Gdata_Gapps($client,
	                                  variable_get('grupal_domain', ''));
        assert($gapps);
      } catch (Exception $e) { // Zend_Gdata_App_AuthException
        drupal_set_message(
	      "Drupal was unable to authenticate to Google Apps: " .
	        $e->getMessage());
      }
    }
  }

  if ($op == 'insert') {
    // Create a new account on 'insert'
	$givenName = "First";
	$familyName = "Last";
	
	if ($gsc != 0) { // Ignore
      try {
	    // TODO: Implement full name stored in $account->data['given_name']?
	    // http://mameou.wordpress.com/2008/05/09/drupal-working-with-users/
        $user = $gapps->createUser(grupal_cleanname($edit['name']),
                                   $givenName, $familyName, $edit['pass']);
        if (($gsc == 1) || ($edit['status'] == 0)) { // Suspend
          	$user->login->suspended = true;
	        $user->save();
        } // Enable (nothing to do)
      } catch (Exception $e) { // Zend_Gdata_App_HttpException
        drupal_set_message(
	      "There was a problem creating an associated Google Apps account: " .
	      $e->getMessage());
      }
    }
  }

  if ($op == 'update') {
	drupal_set_message(var_dump($account));
    // Update Google Apps details on 'update'
    $gus = ($account->status != $edit['status']) &&
             variable_get('grupal_update_suspend', 1);
    $gup = $edit['pass'] && variable_get('grupal_update_password', 1);
    if ($gus || $gup) {

      try {
        // Retrieve the user from Google Apps
        $user = $gapps->retrieveUser(grupal_cleanname($edit['name']));

        if ($user) {
	      // Update suspend status (if necessary)
          if ($gus) {
            $user->login->suspended = ($edit['status'] == 0);
          }

          // Update password (if necessary)
          if ($gup) {
	        $user->login->password = $edit['pass'];
	      }    

          // Save the user back to Google Apps
          $user->save();
          drupal_set_message("Associated Google Apps user updated: " .
            grupal_cleanname($edit['name']));

        } else {
          drupal_set_message("No associated Google Apps user was found:" .
            grupal_cleanname($edit['name']));
        }
      } catch (Exception $e) {
        drupal_set_message(
	      "There was a problem updating an associated Google Apps account: " .
          $e->getMessage());
      }
    }
    /*
    // TODO: Update role/group memberships
    foreach (array_keys($array['roles']) as $rid) {
      if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
        //db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $account->uid, $rid);
      }
    */
  }


  if ($op == 'validate') {
    // Prevent username changes to existing accounts (uid!=0) per Google Apps
    if (!variable_get('grupal_change_username', 0) && (($account->uid) && $edit['name'] &&
          ($edit['name'] != $account->name))) {
      form_set_error('name',
        t('Changing usernames is not permitted by Google Apps settings.'));
    }
  }

  if ($op == 'delete') {
    // Suspend or delete user on 'delete'
	if ($gsd != 0) { // Ignore
      try {
        if ($gsd == 1) { // Suspend
          $user = $gapps->retrieveUser(grupal_cleanname($account->name));
          if ($user !== null) {
            $user->login->suspended = true;
            $user->save();
          } else {
            drupal_set_message("No associated Google Apps user was found:" .
              grupal_cleanname($account->name));
          }
        } elseif ($gsd == 2) { // Delete
          $gapps->deleteUser(grupal_cleanname($account->name));
        }
      } catch (Exception $e) { // Zend_Gdata_App_HttpException
        drupal_set_message("There was a problem deleting/suspending an " .
          "associated Google Apps account: " . $e->getMessage());
      }
    }
  }
} // function grupal_user

/**
* Filter unsupported characters from username
* @param name Drupal username
* @return Google Apps compatible clean username
*/
function grupal_cleanname($name) {
  return eregi_replace("[^a-z0-9\.]", "", strtolower($name));
} // function grupal_cleanname
